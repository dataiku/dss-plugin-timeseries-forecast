{
    "meta": {
        "label": "2. Forecast future values",
        "description": "Use trained forecasting models to predict future values after your historical dataset",
        "icon": "icon-signal",
        "iconColor": "green",
        "displayOrderRank": 2
    },
    "kind": "PYTHON",
    "selectableFromDataset": "external_features_future_dataset",
    "selectableFromFolder": "model_folder",
    "inputRoles": [
        {
            "name": "model_folder",
            "label": "Trained model folder",
            "description": "Folder containing models saved by the \"Train and evaluate forecasting models\" recipe",
            "arity": "UNARY",
            "required": true,
            "acceptsDataset": false,
            "acceptsManagedFolder": true
        },
        {
            "name": "historical_dataset",
            "label": "Optional - Dataset to forecast, if not provided, use the training data",
            "description": "The recipe will forecast values after this dataset",
            "arity": "UNARY",
            "required": false,
            "acceptsDataset": true,
            "acceptsManagedFolder": false
        },
        {
            "name": "external_features_future_dataset",
            "label": "Optional - Dataset with future values of external features",
            "description": "Only required if you specified external features in the \"Train and evaluate forecasting models\" recipe",
            "arity": "UNARY",
            "required": false,
            "acceptsDataset": true,
            "acceptsManagedFolder": false
        }
    ],
    "outputRoles": [
        {
            "name": "output_dataset",
            "label": "Forecast dataset",
            "description": "Dataset with predicted future values and confidence intervals",
            "arity": "UNARY",
            "required": true,
            "acceptsDataset": true,
            "acceptsManagedFolder": false
        }
    ],
    "paramsPythonSetup": "select_model_version.py",
    "params": [
        {
            "name": "separator_model_selection",
            "label": "Model selection",
            "type": "SEPARATOR"
        },
        {
            "name": "model_selection_mode",
            "label": "Selection mode",
            "type": "SELECT",
            "mandatory": true,
            "defaultValue": "auto",
            "description": "Automatically select the best-performing model from the last training session",
            "getChoicesFromPython": true
        },
        {
            "name": "performance_metric",
            "label": "Performance metric",
            "type": "SELECT",
            "mandatory": false,
            "defaultValue": "MASE",
            "visibilityCondition": "model.model_selection_mode == 'auto'",
            "selectChoices": [
                {
                    "value": "MSE",
                    "label": "Mean Squared Error"
                },
                {
                    "value": "MASE",
                    "label": "Mean Absolute Scaled Error"
                },
                {
                    "value": "MAPE",
                    "label": "Mean Absolute Percentage Error"
                },
                {
                    "value": "sMAPE",
                    "label": "Mean Absolute Percentage Error (symmetric)"
                },
                {
                    "value": "MSIS",
                    "label": "Mean Scaled Interval Score"
                },
                {
                    "value": "ND",
                    "label": "Normalized Deviation"
                },
                {
                    "value": "RMSE",
                    "label": "Root Mean Squared Error"
                },
                {
                    "value": "mean_wQuantileLoss",
                    "label": "Mean weighted Quantile Loss"
                }
            ]
        },
        {
            "name": "manually_selected_session",
            "type": "SELECT",
            "label": "Training session",
            "getChoicesFromPython": true,
            "visibilityCondition": "model.model_selection_mode == 'manual'"
        },
        {
            "name": "manually_selected_model_label",
            "type": "SELECT",
            "label": "Model name",
            "getChoicesFromPython": true,
            "visibilityCondition": "model.model_selection_mode == 'manual'"
        },
        {
            "name": "separator_forecasting",
            "label": "Prediction",
            "type": "SEPARATOR"
        },
        {
            "name": "prediction_length",
            "label": "Forecasting horizon",
            "type": "INT",
            "mandatory": true,
            "defaultValue": -1,
            "description": "A value of -1 sets the horizon to the one used at training time. Expressed in number of time steps, it must be smaller than the horizon used at training time.",
            "minI": -1,
            "visibilityCondition": "false"
        },
        {
            "name": "confidence_interval",
            "label": "Confidence interval (%)",
            "type": "INT",
            "mandatory": true,
            "defaultValue": 95,
            "minI": 1,
            "maxI": 99,
            "description": "Compute lower and upper confidence bound forecasts"
        },
        {
            "name": "include_history",
            "label": "Include history",
            "description": "Keep historical data in addition to future values",
            "type": "BOOLEAN",
            "defaultValue": true,
            "mandatory": true
        },
        {
            "name": "sampling_method",
            "label": "Sampling method",
            "type": "SELECT",
            "mandatory": true,
            "description": "",
            "selectChoices": [
                {
                    "value": "no_sampling",
                    "label": "No sampling (whole data)"
                },
                {
                    "value": "last_records",
                    "label": "Last records (most recent)"
                }
            ],
            "defaultValue": "last_records",
            "visibilityCondition": "model.include_history"
        },
        {
            "name": "number_records",
            "label": "Nb. records",
            "description": "Maximum number of historical records to include per time series",
            "type": "INT",
            "defaultValue": 10000,
            "mandatory": false,
            "minI": 1,
            "visibilityCondition": "model.include_history && model.sampling_method=='last_records'"
        }
    ],
    "resourceKeys": []
}